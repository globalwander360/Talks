Here are the JUnit test classes for all 3 methods with 100% code coverage and no comments:


---

✅ RequestServiceImplTest.java

@ExtendWith(MockitoExtension.class)
class RequestServiceImplTest {

    @InjectMocks
    private RequestServiceImpl requestService;

    @Mock
    private ReferentialUtil referentialUtil;

    @Test
    void testGetCxTProdCodeName_ReturnsExpectedMap() {
        String bnppuid = "user123";

        List<CxtProdCode> cxtProdCodeList = List.of(
                new CxtProdCode("P001", "Product A"),
                new CxtProdCode("P002", "Product B")
        );

        when(referentialUtil.getCxtProdCode(bnppuid)).thenReturn(cxtProdCodeList);

        Map<String, String> result = requestService.getCxTProdCodeName(bnppuid);

        assertEquals(2, result.size());
        assertEquals("Product A", result.get("P001"));
        assertEquals("Product B", result.get("P002"));

        verify(referentialUtil, times(1)).getCxtProdCode(bnppuid);
    }
}


---

✅ EventServiceImpl_GetProdCodeByEventIdTest.java

@ExtendWith(MockitoExtension.class)
class EventServiceImpl_GetProdCodeByEventIdTest {

    @InjectMocks
    private EventServiceImpl eventService;

    @Mock
    private EventRepository eventRepository;

    @Test
    void testGetProdCodeByEventId_WhenPresent() {
        String eventId = "E001";
        String prodCode = "PCODE123";

        ExternalTrackAndTraceEntity extEntity = new ExternalTrackAndTraceEntity();
        extEntity.setProdCode(prodCode);

        EventEntity event = new EventEntity();
        event.setExternalTrackAndTraceEntity(extEntity);

        when(eventRepository.findById(eventId)).thenReturn(Optional.of(event));

        String result = eventService.getProdCodeByEventId(eventId);

        assertEquals(prodCode, result);
    }

    @Test
    void testGetProdCodeByEventId_WhenEventNotFound() {
        when(eventRepository.findById("UNKNOWN")).thenReturn(Optional.empty());

        String result = eventService.getProdCodeByEventId("UNKNOWN");

        assertNull(result);
    }

    @Test
    void testGetProdCodeByEventId_WhenExternalEntityIsNull() {
        EventEntity event = new EventEntity();
        event.setExternalTrackAndTraceEntity(null);

        when(eventRepository.findById("E002")).thenReturn(Optional.of(event));

        String result = eventService.getProdCodeByEventId("E002");

        assertNull(result);
    }
}


---

✅ EventServiceImpl_FilterEventsTest.java

@ExtendWith(MockitoExtension.class)
class EventServiceImpl_FilterEventsTest {

    @InjectMocks
    private EventServiceImpl eventService;

    @Mock
    private EventRepository repository;

    @Mock
    private ReferentialUtil referentialUtil;

    @Test
    void testFilterEvents_SetsProdCodeName() {
        String bnppuid = "user123";
        String prodCode = "P789";
        String prodCodeName = "Test Product";

        ExternalTrackAndTraceEntity extEntity = new ExternalTrackAndTraceEntity();
        extEntity.setProdCode(prodCode);

        EventEntity entity = new EventEntity();
        entity.setExternalTrackAndTraceEntity(extEntity);

        List<EventEntity> eventList = List.of(entity);
        Page<EventEntity> page = new PageImpl<>(eventList);

        when(repository.findAll(any(Specification.class), any(PageRequest.class))).thenReturn(page);

        CxtProdCode code = new CxtProdCode();
        code.setProdCode(prodCode);
        code.setProdCodellame(prodCodeName);

        when(referentialUtil.getCxtProdCode(bnppuid)).thenReturn(List.of(code));

        eventService.filterEvents("q", PageRequest.of(0, 10), bnppuid, false, null, null, null);

        assertEquals(prodCodeName, entity.getProdCode());
    }

    @Test
    void testFilterEvents_SetsNullWhenProdCodeMissing() {
        String bnppuid = "user123";

        EventEntity entity = new EventEntity();
        entity.setExternalTrackAndTraceEntity(null);

        List<EventEntity> eventList = List.of(entity);
        Page<EventEntity> page = new PageImpl<>(eventList);

        when(repository.findAll(any(Specification.class), any(PageRequest.class))).thenReturn(page);
        when(referentialUtil.getCxtProdCode(bnppuid)).thenReturn(Collections.emptyList());

        eventService.filterEvents("q", PageRequest.of(0, 10), bnppuid, false, null, null, null);

        assertNull(entity.getProdCode());
    }
}


---

Let me know if you want mock classes for CxtProdCode, EventEntity, or ExternalTrackAndTraceEntity.

