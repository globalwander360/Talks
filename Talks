Thanks for sharing the code. You already have a method defined for cxtProdCodeOptions$, but it’s not currently integrated with the combineLatest() logic in your setInputOptions() method, where all dropdown data is being fetched.

✅ Goal:

You want to merge/integrate the cxtProdCodeOptions$ observable logic into your setInputOptions() method so that it loads along with other dropdowns and the output is used accordingly.


---

✅ Step-by-Step Fix:

1. Move cxtProdCodeOptions$ logic into setInputOptions()’s combineLatest.


2. Assign the result to a component property (cxtProdCodeOptions: SelectItem[]).


3. Sort and use the options like the other dropdowns.




---

✅ Updated setInputOptions() Example:

Add this to your combineLatest([...]) array:

this.store.select(getProcessingEntityId).pipe(
  switchMap(processingEntityId =>
    this.dataService.getCxtProdCode(processingEntityId)
  ),
  first()
),

Update the .subscribe(...) function to capture and assign it:

.subscribe(
  ([
    channel,
    eventPriority,
    productGroup,
    alertCategories,
    remindercategories,
    saveMotives,
    claimCategories,
    reviewCategories,
    throwbackCategories,
    transactionProperties,
    counterPartyCountry,
    productDetailsList,
    cxtProdCodes // <-- Add here
  ]) => {
    // Existing code...

    this.cxtProdCodeOptions = [{ prodCodeName: 'None' }, ...cxtProdCodes].map(item => ({
      label: item.prodCodeName,
      value: item.prodCodeName
    }));

    sortItems(this.cxtProdCodeOptions);

    // Existing assignments...
  }
);


---

✅ Also, Add to Component Properties:

Declare the following at the top with other dropdown variables:

cxtProdCodeOptions: SelectItem[] = [];


---

✅ Final Touch:

You can now bind cxtProdCodeOptions to a dropdown in your template as needed, just like other options such as eventPriorityOptions.


---

✅ Summary:

Your original cxtProdCodeOptions$ was a good start.

You now moved the logic inside setInputOptions() to keep it consistent with the rest.

You're using combineLatest([...]) to wait for all observables.

You store the result in a local property (cxtProdCodeOptions) and sort it.


Let me know if you'd like help adding this to your HTML template as well!
