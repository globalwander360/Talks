import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import java.util.Collections;

class AuditControllerTest {

    @Mock
    private AuditService auditService;

    @Mock
    private AuditExportService auditExportService;

    @InjectMocks
    private AuditController auditController; // Jisme aapka exportAudit method hai

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void exportAudit_shouldReturnExcelFile_whenSuccessful() {
        // Arrange
        AuditDetailListsPage mockPage = new AuditDetailListsPage();
        AuditExportDto dto = new AuditExportDto();
        mockPage.setAuditList(Collections.singletonList(dto));

        when(auditService.getAuditDetails(
                anyString(), anyString(), anyString(), anyString(),
                anyString(), anyInt(), anyInt(), anyString(),
                any(), anyString(), any(Export.class))
        ).thenReturn(mockPage);

        byte[] excelBytes = "testExcelContent".getBytes();
        when(auditExportService.generateExcel(anyList())).thenReturn(excelBytes);

        // Act
        ResponseEntity<byte[]> response = auditController.exportAudit(
                "BR01", "IN", "BNPPUID", "EVT01",
                "en", 0, 10, "date", SortDirection.ASC, "Asia/Kolkata", new Export()
        );

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertArrayEquals(excelBytes, response.getBody());
        assertEquals("application/octet-stream", response.getHeaders().getContentType().toString());
        assertTrue(response.getHeaders().getFirst(HttpHeaders.CONTENT_DISPOSITION).contains("export.xlsx"));
    }

    @Test
    void exportAudit_shouldReturnInternalServerError_whenExceptionOccurs() {
        // Arrange
        when(auditService.getAuditDetails(
                anyString(), anyString(), anyString(), anyString(),
                anyString(), anyInt(), anyInt(), anyString(),
                any(), anyString(), any(Export.class))
        ).thenThrow(new RuntimeException("DB Error"));

        // Act
        ResponseEntity<byte[]> response = auditController.exportAudit(
                "BR01", "IN", "BNPPUID", "EVT01",
                "en", 0, 10, "date", SortDirection.ASC, "Asia/Kolkata", new Export()
        );

        // Assert
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertNull(response.getBody());
    }
}
