package com.bnpparibas.mql.strategy;

import com.bnpparibas.dpw.docstore.model.DocumentMetaDataDocstorewithversioning;
import com.bnpparibas.dpw.mql.model.ExternalTNTRequest;
import com.bnpparibas.mql.bean.externalTrackAndTrace.Attachment;
import com.bnpparibas.mql.bean.externalTrackAndTrace.EcTnxRecord;
import com.bnpparibas.mql.constants.Connexis;
import com.bnpparibas.mql.helper.ExternalTNTHelper;
import com.bnpparibas.mql.util.TradeDocV2Utils;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.io.File;
import java.time.LocalDateTime;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class EcXmlStrategyTest {

    @Mock
    private ExternalTNTHelper cxtHelper;

    @Mock
    private TradeDocV2Utils tradeDocV2Utils;

    @InjectMocks
    private EcXmlStrategy ecXmlStrategy;

    private ExternalTNTRequest request;
    private List<DocumentMetaDataDocstorewithversioning> docList;

    @BeforeEach
    void setup() {
        request = new ExternalTNTRequest();
        request.setProdCode("EC");
        request.setEventId("EVT123");
        request.setCurCode("USD");
        request.setTnxAmt("1000");
        request.setCustomerId("CUST01");
        request.setBranchCode("CUST0");
        request.setCounterPartyName("John Doe");
        request.setEbCusId("EB001");
        request.setEbBanId("BANK001");
        request.setEventCreationDateTime(LocalDateTime.now());

        DocumentMetaDataDocstorewithversioning mockDoc = mock(DocumentMetaDataDocstorewithversioning.class);
        docList = List.of(mockDoc);
    }

    @Test
    void testGetProductCode() {
        String productCode = ecXmlStrategy.getProductCode();
        assertEquals(Connexis.ProductCodeType.EXPORT_COLLECTION, productCode);
    }

    @Test
    void testGenerateXml_WithAttachments() {
        Attachment mockAttachment = new Attachment();
        when(cxtHelper.getXmlAttachments(any(), any())).thenReturn(List.of(mockAttachment));

        EcXmlStrategy spyStrategy = spy(ecXmlStrategy);
        File expectedFile = new File("test.xml");
        doReturn(expectedFile).when(spyStrategy)
                .generateXmlFile(anyString(), any(EcTnxRecord.class), anyString());

        File result = spyStrategy.generatexml(request, "path/to/file", docList);

        assertNotNull(result);
        assertEquals(expectedFile, result);
        verify(cxtHelper, times(1)).getXmlAttachments(any(), any());
        verify(spyStrategy, times(1))
                .generateXmlFile(anyString(), any(EcTnxRecord.class), anyString());
    }
}
