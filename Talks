

ðŸ“‚ static-data.service.ts

getCxtProdCode(bnppuid: string): Observable<CxtProdCode[]> {
  // âœ… OpenAPI client call (autoâ€‘generated method)
  return this.apiClient.getCxtProdCode(bnppuid);
}


---

ðŸ“‚ data.service.ts

getCxtProdCode(processingEntity: string): Observable<CxtProdCode[]> {
  return this.storeService.checkInStore<CxtProdCode[]>(
    StaticDataType.CXT_PROD_CODE,                           // âœ… Store key for caching
    this.staticDataService.getCxtProdCode('BNPPUID'),       // âœ… Call OpenAPI service
    processingEntity                                        // âœ… Context for cache
  );
}



ðŸ“‚ Where you handle the BUFFER_FUNCTION case

case BUFFER_FUNCTION.GET_CXT_PROD_CODE:
  this.dataService.getCxtProdCode(data.id).subscribe((codes: CxtProdCode[]) => {

    // âœ… Filter codes based on eventId from data.id
    const filteredCodes = codes.filter(code => code.eventId === data.id);

    // âœ… Join prodCodeName values into one string
    const productCodeLabels = filteredCodes
      .map(code => code.prodCodeName)
      .join(', ');

    // âœ… Return updated data
    return onLoad({ ...data, productCodeLabels });
  });
break;



ðŸ“‚ StaticDataType.ts (if not defined yet)

Make sure you have CXT_PROD_CODE key in your static types enum:

export enum StaticDataType {
  TRANSACTION_PROPERTY = 'TRANSACTION_PROPERTY',
  BOP_CODE = 'BOP_CODE',
  CXT_PROD_CODE = 'CXT_PROD_CODE'   // âœ… Add this line
}
