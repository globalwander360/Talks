checkForCustomerCurrency$(form: FormGroup): Observable<boolean> {
  const customerAccount = form.get('customer.accountNumber')?.value;
  const currency = form.get('event.currency')?.value?.initialCurrency;

  const accountNum = customerAccount?.accountNum || '';
  const customerCurrency = accountNum.slice(-3); // Assuming last 3 letters denote currency
  const defaultAccountNum = this.defaultCustomerAccountOption?.accountNum || '';

  // Case: No customer account selected
  if (!accountNum || accountNum === 'No account selected') {
    return new Observable<boolean>((observer) => {
      this.confirmationService.confirm({
        key: 'currency-mismatch-warning',
        message: 'The Customer Account has not been selected. Continue?',
        header: 'Confirmation',
        accept: () => {
          observer.next(true);
          observer.complete();
        },
        reject: () => {
          observer.next(false);
          observer.complete();
        }
      });
    });
  }

  // Case: account is default or currencies mismatch
  if (accountNum !== defaultAccountNum && customerCurrency !== currency) {
    return new Observable<boolean>((observer) => {
      if (this.requestFora.get('event.currency')?.disabled) {
        this.confirmationService.confirm({
          key: 'currency-mismatch-warning',
          message: 'The currency of the Customer Account selected is not the same as the Currency of the Event. Continue?',
          header: 'Confirmation',
          accept: () => {
            observer.next(true);
            observer.complete();
          },
          reject: () => {
            observer.next(false);
            observer.complete();
          }
        });
      } else {
        observer.next(true);
        observer.complete();
      }
    });
  }

  // Case: currency matches
  return of(true);
}
